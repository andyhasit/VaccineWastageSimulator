/*
What value is displayed?

*/


app.service('MyMaths', function(){
  var self = this;
  
  self.getSmallestIndexGreaterThan = function(items, val){
    var smallest = null;
    for (var i=0; i < items.length; i++) {
      if (items[i] > val) {
        break;
      }
      smallest = i;
    }
    return smallest;
  };
  
});

app.service('MonitorWastageCalculations', function(MyMaths){
  var self = this;
  
  /*
// Safety stock
do i = 1, 10000 // loop over 10000 supply period simulations
	C(i) = 0 // number of vials consumed in this supply period simulation
	do j = 1, Nss // loop over sessions in the supply period
		generate a random real number in the range [0, 1]; r
		# doses administered = smallest k for which C(k) > r; a
		# doses wasted = V – mod(a, V); w
		# vials consumed = (a + w) / V ; c
		C(i) = C(i) + c
	enddo
enddo
*/

  self.f1 = function() { //? Name for this function?  gets array 10,000 long of vialsConsumed in each simulation period.
    /*
    supply period
    Maximum number of sessions per supply interval
    
    if 31 (nss) Nss = function(Nsw, Ts)
    
    sessionsInSupplyPeriod = 31 (from max intermediate output)
    */
    var sessionsInSupplyPeriod = 31; //? how do I get this?
    var runs = 10000; // loop over 10000 supply period simulations
    for (var i=1; i <= runs; i++) {
      var vialsConsumedInPeriod = 0;
      
      for (var j=0; j <= sessionsInSupplyPeriod; j++) {
        var randomNumb = Math.random();
        var dosesAdministered = x; //? smallest k for which C(k) > r; a
        // cumulativeProbability getSmallestNumberOfDosesAdministered(loop until i find greater than the randomNumb: return integer representing number of dosesAdministered)
        
        
        var dosesWasted = x; //?  vialSize – modulus(dosesAdministered, vialSize); w    ---   what is V?
        var vialsConsumed = dosesAdministered + dosesWasted / vialSize; //(a + w) / V ; c    -- should be an integer.
        vialsConsumedInPeriod += vialsConsumed;
      }
      totals.push(vialsConsumedInPeriod);
    }
  }
  
  self.buildVialsConsumedInSimulationPeriods = function(simulationPeriods, cumulativeProbabilities) {
    var sessionsInSupplyPeriod = 31;
    var vialsConsumedInAllPeriods = [];
    for (var i=1; i<=simulationPeriods; i++) {
      var vialsConsumedInThisPeriod = 0;
      for (var j=0; j <= sessionsInSupplyPeriod; j++) {
        var randomNumb = Math.random();
        var dosesAdministered = MyMaths.getSmallestIndexGreaterThan(cumulativeProbabilities, randomNumb);
      }
      vialsConsumedInAllPeriods.push(vialsConsumedInThisPeriod);
    }
    return vialsConsumedInAllPeriods;
  };
  
  
  // end up with totals [32, 12, 43, 23, ]
  
/*

do i = 0, 1000
	N(i)=0 // number of supply periods in which i vials are consumed
	do j = 1, 10000
		If ( C(j) = i ) N(i) = N(i) + 1
	enddo
  
	Pr(i) = N(i) / 10000 // probability of getting i vials consumed in a supply period (chart this)
	if (i = 0) then
    CuPr(i) = Pr(i)
	else
		CuPr(i) = CuPr(i-1) + Pr(i)
	endif
enddo



x: vials consumed in supply period (if period is 12 months could be up to 10000)
y: cummulative prob of that

*/

  self.f2 = function() { //? Name for this function? fill histogram
    var maxVialsUsed = 1000;
    var runs = 10000;
    for (var i=0; i <= maxVialsUsed; i++) {
      var vialsUsedInPeriod = i;
      var numberOfSupplyPeriodsWhereXvialsUsed = 0;
      for (var j=1; j <= runs; j++) {
        if (vialsUsedInPeriod == ) { // ? If ( C(j) = i ) N(i) = N(i) + 1
          supplyPeriodsWhereXvialsUsed += 1;
        }
      }
      /*
      build new array
      for each in totals:
        add to array the supplyPeriodsWhereXvialsUsed
      
      */
      
      
      var probabilityOfUsingXvialsInPeriod = supplyPeriodsWhereXvialsUsed / runs;
      /*add that to array, and use that to plot
      title: vials consumed probability
      x: Vials consumed per supply period.
      Y: probability of that
      
      should be a bell curve
      
      Add 2 lines:
        expected consumption (call it expected value, or mean, average)
        99%upperlimit (
      
      */
      if (i == 0) {
        //CuPr(i) = Pr(i) //? cumulative?
        var cu = probability;
      } else {
        //CuPr(i) = CuPr(i-1) + Pr(i)
        var cu = (cu - 1) + probability; //? is this right, or do I need previous?
      }
      // TODO change to arrays.
    }
  }
/*

99% upper limit = smallest i for which CuPr(i) is greater than 0.99
expected consumption = average of C(i) for I = 1, 10000                      // TODO average out C...
safety stock = roundup(  99% upper limit – expected consumption)          //To nearest integer.

---

CuPr has 10,000 entries
find first index in cupr which is above 0.99 (will be close to 1000) upper99percentLimit /nr of vials.


*/


});